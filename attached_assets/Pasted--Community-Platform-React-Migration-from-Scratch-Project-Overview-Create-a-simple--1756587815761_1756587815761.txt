# **Community Platform - React Migration from Scratch**

## **Project Overview**
Create a simple community platform from scratch using React, Material UI, Tailwind CSS, and Firebase

## **Technical Stack**
- **React 18** + TypeScript
- **Material UI v5** for components
- **Tailwind CSS** for custom styling
- **Firebase** (Authentication, Firestore, Storage)
- **React Router v6** for navigation
- **Framer Motion** for animations

## **User Roles (Simple)**
1. **Super User (Admin)**: Can see all communities and assign leaders and see current running fund raising campaigns and community issues 

2. **Community Leader**: Can create view progess of fundraising campaigns and issue posts
3. **Normal User**: Can view issues, donate, and interact with posts comment like share

## **Key Features**

### **Authentication**
- Login/Register with Firebase Auth
- Role-based routing
- Background image slider on login page
- Password visibility toggle

### **User Dashboard**
- Sidebar with profile image upload
- Trending issues grid with like/comment
- Fundraising campaigns with progress bars
- Simple notifications system

### **Admin Panel**
- Create new issue posts with image upload
- Create fundraising campaigns with goals
- View basic statistics
- Community management interface

### **Payment Integration**
- **JazzCash** and **EasyPaisa** payment buttons
- Simple donation modal
- Payment status tracking

## **Database Structure (Firebase Firestore)**
```
/users: {id, name, email, role, communityId, profileImage}
/communities: {id, name, leaderId, memberCount}
/issues: {id, title, description, image, likes, comments, communityId, createdAt}
/campaigns: {id, title, description, goal, raised, daysLeft, communityId, createdAt}
/donations: {id, campaignId, amount, paymentMethod, status, timestamp}
```

## **UI/UX Requirements**

### **Design System**
- **Material UI v5** components
- **Tailwind CSS** for custom styling
- **Responsive design** (mobile-first)

### **Animations**
- **Framer Motion** for page transitions
- **Material UI** component animations
- **Hover effects** and micro-interactions
- **Loading states** with skeleton screens

### **Key Pages**
1. **Login** - Authentication with animated background slider
2. **User Dashboard** - Community feed with interactive cards
3. **Admin Dashboard** - Content creation with forms
4. **About** - Team information with animations

## **Simple Features**
- **Like/Comment** on issues with real-time updates
- **Donate** to campaigns with payment integration
- **Create** new posts/campaigns (admin only)
- **Profile** image upload with preview
- **Real-time** notifications and updates

## **Firebase Integration**
- **Authentication** with email/password
- **Firestore** for real-time data
- **Storage** for image uploads
- **Security rules** for role-based access

## **Development Setup**
- **Create React App** with TypeScript template
- **Install dependencies**: Material UI, Tailwind CSS, Firebase, React Router, Framer Motion
- **Configure Tailwind** with custom theme
- **Setup Firebase** project and configuration
- **Implement** authentication and routing
- **Build** components with Material UI + Tailwind
- **Add** animations with Framer Motion

## **Deployment**
- **Firebase Hosting** for deployment
- **Environment variables** for Firebase config
- **Build optimization** for production

This simplified approach focuses on creating a modern React app from scratch while preserving the core functionality of the original community platform.